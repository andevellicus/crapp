###########
# Stage 1 #
###########

# Build the application using an Alpine-based Go image
FROM golang:1.24.2-alpine AS builder

# Install build dependencies if required
RUN apk update && apk add --no-cache git

# Create and set the working directory
WORKDIR /app

# Copy go module files and download dependencies
COPY go.mod go.sum ./
RUN go mod download

# Copy the rest of your application source code
COPY . .

# Build the Go binary. Adjust build flags and output name if needed.
RUN CGO_ENABLED=0 GOOS=linux go build -o app .


###########
# Stage 2 #
###########

# Create the production image using a minimal Alpine base
FROM alpine:latest

# Install any runtime dependencies (e.g., CA certificates for HTTPS)
RUN apk --no-cache add ca-certificates

# Create a non-root user and group for running the application
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Set the working directory in the runtime container
WORKDIR /app

# Copy the built binary from the builder stage
COPY --from=builder /app/app .

# Ensure the binary is owned by the non-root user so that it can be executed
RUN chown appuser:appgroup /app/app

# Switch to the non-root user
USER appuser

# Expose the port on which your application listens (internal network)
EXPOSE 5000

# Run the application
CMD ["./app"]
